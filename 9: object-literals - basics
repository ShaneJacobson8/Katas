// 9: object-literals - basics
// To do: make all tests pass, leave the assert lines unchanged!
// Follow the hints of the failure messages!

describe('The object literal allows for new shorthands', () => {
  const x = 1;
  const y = 2;
  describe('with variables', () => {
    it('the short version for `{x: x}` is {x}', () => {
      const short = {y}; //changed x to y as that's whats being called while keeping shorthand of whats being called***
      assert.deepEqual(short, {y: y});
    });
    it('works with multiple variables too', () => {
      const short = {x, y}; //changed z to y to match assert while maintaining shorthand***
      assert.deepEqual(short, {x: x, y: y});
    });
  });
  describe('with methods', () => {
    const func = () => func;
    it('using the name only uses it as key', () => {
      const short = {func}; // func is the key and const short is asking for the shorthand***
      assert.deepEqual(short, {func});
    });
    it('a different key must be given explicitly, just like before ES6', () => {
      const short = {otherKey: func}; //added otherKey: because it wasn't declared. Specified value for otherkey***
      assert.deepEqual(short, {otherKey: func});
    });
    it('inline functions, can written as `obj={func(){}}` instead of `obj={func:function(){}}`', () => {
      const short = {
        inlineFunc(){return'I am inline'} //remove colon and insert parens. put I am inline in curlys and require the return to plug in***
      };
      assert.deepEqual(short.inlineFunc(), 'I am inline');
    });
  });
});
